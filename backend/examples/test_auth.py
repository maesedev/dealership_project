"""
Script de ejemplo para probar el sistema de autenticaci√≥n.

Este script demuestra c√≥mo:
1. Crear un usuario
2. Autenticarse (login)
3. Usar el token JWT para acceder a endpoints protegidos
4. Refrescar el token

Uso:
    python examples/test_auth.py
"""

import asyncio
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

from app.services.user_service.service import UserService
from app.services.auth_service.service import AuthService
from app.domains.user.domain import UserRole


async def main():
    """Funci√≥n principal de demostraci√≥n"""
    
    print("=" * 60)
    print("üîê DEMOSTRACI√ìN DEL SISTEMA DE AUTENTICACI√ìN JWT")
    print("=" * 60)
    
    # Inicializar servicios
    user_service = UserService()
    auth_service = AuthService()
    
    # Datos de prueba
    test_username = "demo_user"
    test_password = "DemoPassword123"
    test_name = "Usuario Demo"
    
    print("\nüìã Paso 1: Crear usuario de prueba")
    print("-" * 60)
    
    try:
        # Intentar obtener usuario existente
        existing_user = await user_service.get_user_by_username(test_username)
        
        if existing_user:
            print(f"‚úì Usuario ya existe: {test_username}")
            user = existing_user
        else:
            # Crear nuevo usuario
            user = await user_service.create_user(
                username=test_username,
                password=test_password,
                name=test_name,
                roles=[UserRole.USER, UserRole.DEALER]
            )
            print(f"‚úì Usuario creado exitosamente:")
            print(f"  - Username: {user.username}")
            print(f"  - Nombre: {user.name}")
            print(f"  - Roles: {[role.value for role in user.roles]}")
            print(f"  - ID: {user.id}")
    
    except Exception as e:
        print(f"‚úó Error al crear usuario: {e}")
        return
    
    print("\nüîë Paso 2: Login - Autenticaci√≥n con credenciales")
    print("-" * 60)
    
    try:
        # Intentar login con credenciales correctas
        auth_result = await auth_service.login(
            username=test_username,
            password=test_password
        )
        
        if auth_result:
            print("‚úì Login exitoso!")
            print(f"  - Token Type: {auth_result['token_type']}")
            print(f"  - Expira en: {auth_result['expires_in']} segundos")
            print(f"  - Access Token (primeros 50 caracteres): {auth_result['access_token'][:50]}...")
            print(f"\n‚úì Datos del usuario autenticado:")
            print(f"  - Username: {auth_result['user'].username}")
            print(f"  - Nombre: {auth_result['user'].name}")
            print(f"  - Roles: {[role.value for role in auth_result['user'].roles]}")
            print(f"  - Estado: {'Activo' if auth_result['user'].is_active else 'Inactivo'}")
            
            token = auth_result['access_token']
        else:
            print("‚úó Login fallido - Credenciales inv√°lidas")
            return
    
    except Exception as e:
        print(f"‚úó Error en login: {e}")
        return
    
    print("\nüîç Paso 3: Verificar token JWT")
    print("-" * 60)
    
    try:
        # Verificar el token
        payload = await auth_service.verify_token(token)
        
        if payload:
            print("‚úì Token v√°lido!")
            print(f"  - Usuario ID: {payload.get('sub')}")
            print(f"  - Username: {payload.get('username')}")
            print(f"  - Roles: {payload.get('roles')}")
            print(f"  - Nombre: {payload.get('name')}")
            print(f"  - Expira: {payload.get('exp')}")
        else:
            print("‚úó Token inv√°lido")
            return
    
    except Exception as e:
        print(f"‚úó Error al verificar token: {e}")
        return
    
    print("\nüë§ Paso 4: Obtener usuario desde token")
    print("-" * 60)
    
    try:
        # Obtener usuario actual usando el token
        current_user = await auth_service.get_current_user(token)
        
        if current_user:
            print("‚úì Usuario obtenido desde token:")
            print(f"  - ID: {current_user.id}")
            print(f"  - Username: {current_user.username}")
            print(f"  - Nombre: {current_user.name}")
            print(f"  - Roles: {[role.value for role in current_user.roles]}")
            print(f"  - Es Admin: {current_user.is_admin()}")
            print(f"  - Es Dealer: {current_user.is_dealer()}")
            print(f"  - Puede acceder a funciones admin: {current_user.can_access_admin_features()}")
        else:
            print("‚úó No se pudo obtener usuario desde token")
            return
    
    except Exception as e:
        print(f"‚úó Error al obtener usuario: {e}")
        return
    
    print("\nüîÑ Paso 5: Refrescar token")
    print("-" * 60)
    
    try:
        # Refrescar el token
        refresh_result = await auth_service.refresh_token(token)
        
        if refresh_result:
            print("‚úì Token refrescado exitosamente!")
            print(f"  - Nuevo token (primeros 50 caracteres): {refresh_result['access_token'][:50]}...")
            print(f"  - Token Type: {refresh_result['token_type']}")
            print(f"  - Expira en: {refresh_result['expires_in']} segundos")
            
            new_token = refresh_result['access_token']
            print(f"\n‚úì Los tokens son diferentes: {token[:20]}... ‚â† {new_token[:20]}...")
        else:
            print("‚úó No se pudo refrescar el token")
            return
    
    except Exception as e:
        print(f"‚úó Error al refrescar token: {e}")
        return
    
    print("\n‚ùå Paso 6: Intentar login con contrase√±a incorrecta")
    print("-" * 60)
    
    try:
        # Intentar login con contrase√±a incorrecta
        failed_login = await auth_service.login(
            username=test_username,
            password="PasswordIncorrecta123"
        )
        
        if failed_login:
            print("‚úó Esto no deber√≠a pasar - login con contrase√±a incorrecta exitoso")
        else:
            print("‚úì Login rechazado correctamente - Contrase√±a incorrecta")
            
            # Verificar que se registr√≥ el intento fallido
            user_after_fail = await user_service.get_user_by_username(test_username)
            print(f"  - Intentos fallidos: {user_after_fail.security.failed_attempts}")
    
    except Exception as e:
        print(f"‚úó Error al probar login fallido: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
    print("=" * 60)
    print("\nüìù Resumen:")
    print("  1. ‚úì Usuario creado/recuperado")
    print("  2. ‚úì Login exitoso con JWT generado")
    print("  3. ‚úì Token verificado correctamente")
    print("  4. ‚úì Usuario obtenido desde token")
    print("  5. ‚úì Token refrescado exitosamente")
    print("  6. ‚úì Intentos fallidos manejados correctamente")
    print("\nüéâ El sistema de autenticaci√≥n est√° funcionando perfectamente!")
    print("\nüí° Pr√≥ximos pasos:")
    print("  - Probar los endpoints HTTP en /api/v1/auth/login")
    print("  - Implementar autenticaci√≥n en el frontend")
    print("  - Proteger endpoints con las dependencias de auth")
    print()


if __name__ == "__main__":
    # Ejecutar la demostraci√≥n
    asyncio.run(main())

